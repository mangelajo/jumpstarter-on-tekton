apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: prepare-image
spec:
  params:
    - name: imageFile
      type: string
    - name: imageOutputFile
      type: string
  results:
    - description: The login username
      name: user
      type: string
    - description: The login password
      name: password
      type: string
    - description: The SSH private key for acessing the image
      name: sshKey
      type: string
  steps:
    - image: 'quay.io/mangelajo/guestfs-tools:latest'
      imagePullPolicy: Always
      name: prepare-image
      resources: {}
      script: |
        #!/usr/bin/env sh
        set -x


        OUT_FILE=$(workspaces.image-out.path)/$(params.imageOutputFile)


        xz -d -T0 -v \
            $(workspaces.images.path)/$(params.imageFile) -c \
            > $(params.imageOutputFile)

        # create and inject an authorized key


        mkdir -p ssh

        ssh-keygen -b 2048 -t rsa -f ssh/id_rsa -q -N ""

        mkdir -p mount

        # guestmount the locally copied image, if we do it over the volume mount
        # it doesn't work for some reason.

        LIBGUESTFS_BACKEND=direct guestmount -a $(params.imageOutputFile) \
                  -m /dev/sda3:/ -m /dev/sda2:/boot \
                  -o allow_other -o nonempty --rw mount

        trap "guestunmount ${PWD}/mount" ERR SIGINT


        cp ssh/id_rsa.pub mount/root/.ssh/authorized_keys
        chmod 700 mount/root/.ssh
        chmod 600 mount/root/.ssh/authorized_keys

        ls -la mount/
        ls -la mount/root/.ssh/
        cat mount/root/.ssh/authorized_keys
        cat ssh/id_rsa.pub

        # TODO: make sure we patch the password properly
        cat mount/etc/passwd | grep root
        cat mount/etc/shadow | grep root

        echo PermitRootLogin yes >> mount/etc/ssh/sshd_config

        sed -i s/ttyS0/ttyTCU0/g \
                mount/boot/loader/entries/* \
                mount/etc/default/grub \
                mount/etc/kernel/cmdline

        # unmount the image

        guestunmount mount && trap - ERR SIGINT

        sleep 2

        sync

        sleep 2

        sync


        cp $(params.imageOutputFile) "${OUT_FILE}"

        if [[ "$(workspaces.ssh-auth-out.bound)" == "true" ]] ; then
          cp ssh/id_rsa $(workspaces.ssh-auth-out.path)/
          cp ssh/id_rsa.pub $(workspaces.ssh-auth-out.path)/
        fi

        cat ssh/id_rsa | base64 -w0 >  "$(results.sshKey.path)"
        echo root > "$(results.user.path)"
        echo redhat > "$(results.password.path)"
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /dev
          name: dynamic-devices
  volumes:
    - hostPath:
        path: /dev
      name: dynamic-devices
  workspaces:
    - description: The images to be prepared
      name: images
    - description: The image output
      name: image-out
    - description: SSH Authentication details to access the image
      name: ssh-auth-out
      optional: true
